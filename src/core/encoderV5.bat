@echo off
setlocal enabledelayedexpansion
title Instagram Encoder Framework V5.2 - Modular Edition
chcp 65001 >nul 2>&1
color 0A

:: ================================================================================
:: INSTAGRAM ENCODER FRAMEWORK V5.2 - MODULAR EDITION
:: Zero-Recompression Video Encoder | Gabriel Schoenardie | 2025
:: ================================================================================

:: GLOBAL VARIABLES
set "SCRIPT_VERSION=5.2-modular"
set "CONFIG_FILE=src\config\encoder_config.json"
set "PROFILES_DIR=src\profiles\presets"
set "EXEC_LOG="
set "BACKUP_CREATED=N"
set "CPU_CORES=0"
set "GLOBAL_START_TIME=0"
set "TOTAL_ENCODE_TIME=00h 00m 00s"

:: Profile System Variables
set "PROFILE_NAME="
set "VIDEO_WIDTH="
set "VIDEO_HEIGHT="
set "VIDEO_ASPECT="
set "TARGET_BITRATE="
set "MAX_BITRATE="
set "BUFFER_SIZE="
set "GOP_SIZE="
set "KEYINT_MIN="
set "X264_PRESET="
set "X264_TUNE="
set "X264_PARAMS="
set "COLOR_PARAMS="
set "PROFILE_SELECTED=N"
set "CURRENT_PROFILE_ID="

:: Advanced Customization Variables
set "CUSTOM_PRESET="
set "CUSTOM_PSY_RD="
set "ADVANCED_MODE=N"
set "CUSTOMIZATION_ACTIVE=N"

:: Color Science Variables
set "CUSTOM_COLOR_RANGE="
set "CUSTOM_COLOR_PRIMARIES="
set "CUSTOM_COLOR_TRC="
set "CUSTOM_COLOR_SPACE="
set "COLOR_PRESET_NAME="
set "CUSTOM_COLOR_PARAMS="
set "COLOR_CUSTOMIZATION_ACTIVE=N"

:: Audio Enhancement Variables
set "CUSTOM_AUDIO_BITRATE="
set "CUSTOM_AUDIO_SAMPLERATE="
set "CUSTOM_AUDIO_CHANNELS="
set "CUSTOM_AUDIO_PROCESSING="
set "AUDIO_PRESET_NAME="
set "AUDIO_NORMALIZATION=N"
set "AUDIO_FILTERING=N"
set "CUSTOM_AUDIO_PARAMS="

:: Audio Normalization Variables
set "CUSTOM_LUFS_TARGET="
set "CUSTOM_PEAK_LIMIT="
set "CUSTOM_LRA_TARGET="
set "NORMALIZATION_PRESET_NAME="
set "CUSTOM_NORMALIZATION_PARAMS="
set "AUDIO_PROCESSING_ACTIVE=N"

:: Professional Menu System Variables
set "WORKFLOW_STEP=0"
set "SESSION_START_TIME="
set "FILES_CONFIGURED=N"
set "PROFILE_CONFIGURED=N"
set "READY_TO_ENCODE=N"
set "SYSTEM_STATUS=READY"

:: Modular System Variables
set "MODULAR_PROFILES_AVAILABLE=N"
set "MODULAR_VALIDATION_STATUS=NOT_CHECKED"

:: ========================================
:: MAIN EXECUTION FLOW
:: ========================================
call :SafeInitialization
call :LogEntry "===== INICIO V5.2 MODULAR (%date% %time%) ====="
call :ShowProfessionalHeader
call :DetectSystemCapabilities
call :CheckFFmpeg
if errorlevel 1 goto :ErrorExit
call :LoadModularConfig
call :InitializeProfessionalSystem
call :ShowProfessionalMainMenu
call :PostProcessing

:: ========================================
:: MODULAR SYSTEM INTEGRATION
:: ========================================
:LoadModularConfig
echo üîß Loading modular configuration...

:: SIMPLIFIED PATH DETECTION
set "SCRIPT_DIR=%~dp0"
for %%I in ("%SCRIPT_DIR%..") do set "PROJECT_ROOT=%%~fI"
set "PROFILES_DIR=%PROJECT_ROOT%\src\profiles\presets"
set "CONFIG_FILE=%PROJECT_ROOT%\src\config\encoder_config.json"

:: CORRE√á√ÉO CR√çTICA: INICIALIZA√á√ÉO SEGURA
set "MODULAR_PROFILE_COUNT=0"

:: SINGLE VALIDATION CHECK
if exist "%PROFILES_DIR%" (
    :: VERS√ÉO CORRIGIDA - LOOP SEGURO
    for %%F in ("%PROFILES_DIR%\*.prof") do (
        if exist "%%F" (
            set /a "MODULAR_PROFILE_COUNT+=1"
        )
    )
    if !MODULAR_PROFILE_COUNT! GTR 0 (
        echo ‚úÖ Modular system: !MODULAR_PROFILE_COUNT! profiles active
        set "MODULAR_PROFILES_AVAILABLE=Y"
    ) else (
        echo ‚ö†Ô∏è No profiles found - using embedded fallback
        set "MODULAR_PROFILES_AVAILABLE=N"
    )
) else (
    :: FALLBACK PATH CHECK
    set "ALT_PROFILES_DIR=C:\Users\Gabriel\encoder\src\profiles\presets"
    if exist "!ALT_PROFILES_DIR!" (
        echo ‚úÖ Found at alternative location
        set "PROFILES_DIR=!ALT_PROFILES_DIR!"
        set "CONFIG_FILE=C:\Users\Gabriel\encoder\src\config\encoder_config.json"
        set "MODULAR_PROFILES_AVAILABLE=Y"
        :: RESET E REC√ÅLCULO SEGURO
        set "MODULAR_PROFILE_COUNT=0"
        for %%F in ("!ALT_PROFILES_DIR!\*.prof") do (
            if exist "%%F" (
                set /a "MODULAR_PROFILE_COUNT+=1"
            )
        )
    ) else (
        echo ‚ùå Profiles directory not found
        set "MODULAR_PROFILES_AVAILABLE=N"
        set "MODULAR_PROFILE_COUNT=0"
    )
)

call :LogEntry "[MODULAR] System: %MODULAR_PROFILES_AVAILABLE%, Profiles: !MODULAR_PROFILE_COUNT!"
exit /b 0

:LoadModularProfileFile
set "profile_file=%~1"
set "profile_type=%~2"

if not exist "%profile_file%" (
    echo   ‚ùå Profile file not found: %profile_file%
    call :LogEntry "[ERROR] Profile file not found: %profile_file%"
    exit /b 1
)

:: RESET VARIABLES (essential - preserve exactly)
set "PROFILE_NAME="
set "VIDEO_WIDTH="
set "VIDEO_HEIGHT="
set "VIDEO_ASPECT="
set "TARGET_BITRATE="
set "MAX_BITRATE="
set "BUFFER_SIZE="
set "GOP_SIZE="
set "KEYINT_MIN="
set "X264_PRESET="
set "X264_TUNE="
set "X264_PARAMS="
set "COLOR_PARAMS="

:: OPTIMIZED PARSING (preserve logic, reduce debug)
for /f "usebackq eol=# tokens=1* delims==" %%A in ("%profile_file%") do (
    set "param_name=%%A"
    set "param_value=%%B"

    if defined param_value (
        for /f "tokens=* delims= " %%C in ("!param_name!") do set "param_name=%%C"

        if "!param_name!"=="PROFILE_NAME" set "PROFILE_NAME=!param_value!"
        if "!param_name!"=="VIDEO_WIDTH" set "VIDEO_WIDTH=!param_value!"
        if "!param_name!"=="VIDEO_HEIGHT" set "VIDEO_HEIGHT=!param_value!"
        if "!param_name!"=="VIDEO_ASPECT" set "VIDEO_ASPECT=!param_value!"
        if "!param_name!"=="TARGET_BITRATE" set "TARGET_BITRATE=!param_value!"
        if "!param_name!"=="MAX_BITRATE" set "MAX_BITRATE=!param_value!"
        if "!param_name!"=="BUFFER_SIZE" set "BUFFER_SIZE=!param_value!"
        if "!param_name!"=="GOP_SIZE" set "GOP_SIZE=!param_value!"
        if "!param_name!"=="KEYINT_MIN" set "KEYINT_MIN=!param_value!"
        if "!param_name!"=="X264_PRESET" set "X264_PRESET=!param_value!"
        if "!param_name!"=="X264_TUNE" set "X264_TUNE=!param_value!"
        if "!param_name!"=="X264_PARAMS" set "X264_PARAMS=!param_value!"
        if "!param_name!"=="COLOR_PARAMS" set "COLOR_PARAMS=!param_value!"
    )
)

:: ESSENTIAL VALIDATION ONLY
if not defined PROFILE_NAME exit /b 1
if not defined VIDEO_WIDTH exit /b 1
if not defined VIDEO_HEIGHT exit /b 1
if not defined TARGET_BITRATE exit /b 1

echo ‚úÖ Profile loaded: !PROFILE_NAME! (!VIDEO_WIDTH!x!VIDEO_HEIGHT!)

:: SET STATUS (preserve exactly)
set "PROFILE_SELECTED=Y"
set "PROFILE_CONFIGURED=Y"
set "CURRENT_PROFILE_ID=modular_%profile_type%"
set "CURRENT_PROFILE_FILE=%profile_file%"

call :LogEntry "[MODULAR] Loaded: !PROFILE_NAME!"
exit /b 0

:SafeInitialization
if not defined CPU_CORES set "CPU_CORES=2"
if not defined TOTAL_RAM_GB set "TOTAL_RAM_GB=4"
if not defined THREAD_COUNT set "THREAD_COUNT=2"
if not defined WORKFLOW_STEP set "WORKFLOW_STEP=1"
if not defined GLOBAL_START_TIME set "GLOBAL_START_TIME=0"
if not defined SYSTEM_STATUS set "SYSTEM_STATUS=INITIALIZING"
if not defined FILES_CONFIGURED set "FILES_CONFIGURED=N"
if not defined PROFILE_CONFIGURED set "PROFILE_CONFIGURED=N"
if not defined READY_TO_ENCODE set "READY_TO_ENCODE=N"
if not defined ADVANCED_MODE set "ADVANCED_MODE=N"
if not defined CUSTOMIZATION_ACTIVE set "CUSTOMIZATION_ACTIVE=N"
if not defined NUMBER_OF_PROCESSORS set "NUMBER_OF_PROCESSORS=4"
if "%NUMBER_OF_PROCESSORS%"=="0" set "NUMBER_OF_PROCESSORS=4"
exit /b 0

:InitializeProfessionalSystem
call :GetTimeInSeconds
set "SESSION_START_TIME=!total_seconds!"
set "WORKFLOW_STEP=1"
set "SYSTEM_STATUS=INITIALIZED"
call :LogEntry "[SYSTEM] Professional Menu System initialized"
exit /b 0

:ShowProfessionalMainMenu
cls
call :ShowProfessionalHeader
call :ShowSystemDashboard
call :ShowMainMenuOptions
call :ProcessMainMenuChoice
exit /b 0

:ShowProfessionalHeader
echo.
echo    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó
echo    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë
echo    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë
echo    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
echo    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë
echo    ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                                                                              ‚ïë
echo ‚ïë            üé¨ INSTAGRAM ENCODER FRAMEWORK V5.2 MODULAR                       ‚ïë
echo ‚ïë                          üèóÔ∏è PROFESSIONAL EDITION üèóÔ∏è                          ‚ïë
echo ‚ïë                                                                              ‚ïë
echo ‚ïë    ‚ö° Zero-Recompression Guaranteed  üé≠ Netflix/Disney+ Quality Level        ‚ïë
echo ‚ïë    üéõÔ∏è Advanced Customization         üìä Modular Profile System               ‚ïë
echo ‚ïë    üî¨ Scientific Parameters          üé™ Hollywood-Level Encoding             ‚ïë
echo ‚ïë                                                                              ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
exit /b 0

:ShowSystemDashboard
echo  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
echo  ‚îÇ üìä SYSTEM DASHBOARD                                                         ‚îÇ
echo  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

:: HARDWARE & ARCHITECTURE (Fixed syntax)
if "%IS_LAPTOP%"=="Y" (
    echo   üñ•Ô∏è System: %CPU_CORES% cores, %TOTAL_RAM_GB%GB RAM, %CPU_ARCH% ^(Laptop^)
) else (
    echo   üñ•Ô∏è System: %CPU_CORES% cores, %TOTAL_RAM_GB%GB RAM, %CPU_ARCH% ^(Desktop^)
)

if "%MODULAR_PROFILES_AVAILABLE%"=="Y" (
    echo   üèóÔ∏è Architecture: V%SCRIPT_VERSION% Edition - ACTIVE
) else (
    echo   üèóÔ∏è Architecture: V%SCRIPT_VERSION% Edition - UNAVAILABLE
)
echo   üîÑ Workflow: Step %WORKFLOW_STEP%/6 - %SYSTEM_STATUS%

:: File Status Check
if defined INPUT_FILE (
    if defined OUTPUT_FILE (
        echo   üì• Input: %INPUT_FILE%
        echo   üì§ Output: %OUTPUT_FILE%
        set "FILES_CONFIGURED=Y"
    ) else (
        echo   üì• Input: %INPUT_FILE%
        echo   üì§ Output: Not configured
        set "FILES_CONFIGURED=N"
    )
) else (
    echo   üìÅ Files: Not configured
    set "FILES_CONFIGURED=N"
)

:: Profile Status Check - FIXED VERSION
if defined PROFILE_NAME (
    if defined VIDEO_WIDTH (
        if defined VIDEO_HEIGHT (
            if defined TARGET_BITRATE (
                if defined MAX_BITRATE (
                    echo   ‚úÖ Profile: "%PROFILE_NAME%" (%VIDEO_WIDTH%x%VIDEO_HEIGHT%)
                    echo   üéØ Bitrate: %TARGET_BITRATE% target / %MAX_BITRATE% max
                    if "%ADVANCED_MODE%"=="Y" (
                        echo   üéõÔ∏è Mode: Advanced customizations ACTIVE
                    ) else (
                        echo   üé¨ Mode: Standard Hollywood parameters
                    )
                    set "PROFILE_CONFIGURED=Y"
                    goto :profile_status_done
                )
            )
        )
    )
    echo   ‚ö†Ô∏è Profile: Incomplete configuration
    set "PROFILE_CONFIGURED=N"
    goto :profile_status_done
) else (
    echo   üé¨ Profile: Not selected
    set "PROFILE_CONFIGURED=N"
)

:profile_status_done
if "%FILES_CONFIGURED%"=="Y" (
    if "%PROFILE_CONFIGURED%"=="Y" (
        set "READY_TO_ENCODE=Y"
        echo   üöÄ Status: READY TO ENCODE
    ) else (
        set "READY_TO_ENCODE=N"
        echo   ‚è≥ Status: Select profile to continue
    )
) else (
    set "READY_TO_ENCODE=N"
    echo   ‚è≥ Status: Configuration needed
    if "%FILES_CONFIGURED%"=="N" echo     ‚Üí Configure files first
    if "%PROFILE_CONFIGURED%"=="N" echo     ‚Üí Select profile
)
echo.
exit /b 0

:ShowMainMenuOptions
echo  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
echo  ‚îÇ üéõÔ∏è PROFESSIONAL WORKFLOW                                                    ‚îÇ
echo  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
echo.
echo  üìÅ CONFIGURATION:
if "%FILES_CONFIGURED%"=="Y" (
    echo   [1] ‚úÖ Files Configured - Input/Output
) else (
    echo   [1] üìÅ Configure Files - Input/Output ‚≠ê START HERE
)
if "%PROFILE_CONFIGURED%"=="Y" (
    echo   [2] ‚úÖ Profile Selected - %PROFILE_NAME%
) else (
    echo   [2] üé¨ Select Profile ‚≠ê REQUIRED
)
echo.
echo  üé¨ ENCODING:
if "%READY_TO_ENCODE%"=="Y" (
    echo   [3] üöÄ START ENCODING 2-Pass Hollywood ‚≠ê READY!
) else (
    echo   [3] ‚è≥ Start Encoding - Complete configuration first
)
echo.
echo  üéõ  ADVANCED:
echo   [4] ‚öôÔ∏è Advanced Customization
echo   [5] üîç Analyze Input File
echo   [6] üìä Profile Management - Export/Import/Library
echo.
echo  üèóÔ∏è MODULAR SYSTEM:
if "%MODULAR_PROFILES_AVAILABLE%"=="Y" (
    echo   [V] üîç Validate Modular Profiles
    echo   [R] üîÑ Reload Modular Profiles
    echo   [M] üîß Modular System Info
)
echo   [7] üìã System Information
echo   [D] üîç Debug Profile Variables
echo   [0] üö™ Exit
echo.
exit /b 0

:ProcessMainMenuChoice
set /p "main_choice=üéØ Select option [0-7, V, R, M, D]: "

if not defined main_choice (
    echo ‚ùå Please select an option
    pause
    goto :ShowProfessionalMainMenu
)

if "%main_choice%"=="1" goto :ConfigureFiles
if "%main_choice%"=="2" goto :ConfigureProfile
if "%main_choice%"=="3" goto :StartEncoding
if "%main_choice%"=="4" goto :AdvancedCustomization
if "%main_choice%"=="5" goto :AnalyzeInputFile
if "%main_choice%"=="6" goto :ProfileManagement
if /i "%main_choice%"=="V" goto :ValidateModularProfiles
if /i "%main_choice%"=="R" goto :ReloadModularProfiles
if /i "%main_choice%"=="M" goto :ShowModularSystemInfo
if "%main_choice%"=="7" goto :ShowSystemInfo
if /i "%main_choice%"=="D" goto :DebugProfileVariables
if "%main_choice%"=="0" goto :ExitProfessional

echo ‚ùå Invalid choice. Please select 0-7 or V, R, M, D.
pause
goto :ShowProfessionalMainMenu

:DebugProfileVariables
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        üîç DEBUG PROFILE VARIABLES                            ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

:: ESSENTIAL PROFILE STATUS
echo üìä CRITICAL PROFILE VARIABLES:
echo   Profile: "%PROFILE_NAME%"
echo   Resolution: %VIDEO_WIDTH%x%VIDEO_HEIGHT% (%VIDEO_ASPECT%)
echo   Bitrate: %TARGET_BITRATE%/%MAX_BITRATE%
echo   Preset: %X264_PRESET% ^| Tune: %X264_TUNE%

:: VALIDATION STATUS
set "CRITICAL_ERRORS=0"
echo.
echo üîç VALIDATION STATUS:
if defined PROFILE_NAME   (echo   ‚úÖ PROFILE_NAME) 	 else (echo   ‚ùå PROFILE_NAME & set /a "CRITICAL_ERRORS+=1")
if defined VIDEO_WIDTH    (echo   ‚úÖ VIDEO_WIDTH) 	 else (echo   ‚ùå VIDEO_WIDTH & set /a "CRITICAL_ERRORS+=1")
if defined VIDEO_HEIGHT   (echo   ‚úÖ VIDEO_HEIGHT) 	 else (echo   ‚ùå VIDEO_HEIGHT & set /a "CRITICAL_ERRORS+=1")
if defined TARGET_BITRATE (echo   ‚úÖ TARGET_BITRATE) else (echo   ‚ùå TARGET_BITRATE & set /a "CRITICAL_ERRORS+=1")
if defined X264_PRESET    (echo   ‚úÖ X264_PRESET) 	 else (echo   ‚ùå X264_PRESET & set /a "CRITICAL_ERRORS+=1")
if defined X264_PARAMS    (echo   ‚úÖ X264_PARAMS) 	 else (echo   ‚ö†Ô∏è X264_PARAMS missing)

:: SYSTEM STATUS
echo.
echo üèóÔ∏è SYSTEM STATUS:
echo   Modular: %MODULAR_PROFILES_AVAILABLE% ^| Validation: %MODULAR_VALIDATION_STATUS%
echo   Profile Configured: %PROFILE_CONFIGURED% ^| Files: %FILES_CONFIGURED%
echo   Ready to Encode: %READY_TO_ENCODE% ^| Status: %SYSTEM_STATUS%

:: ADVANCED MODE
if "%ADVANCED_MODE%"=="Y" (
    echo   üéõÔ∏è Advanced: ACTIVE
	if defined CUSTOM_PRESET 		echo     ‚Ä¢ Custom Preset: %CUSTOM_PRESET%
    if defined CUSTOM_PSY_RD 		echo     ‚Ä¢ Custom Psy RD: %CUSTOM_PSY_RD%
    if defined CUSTOM_GOP_SIZE 		echo     ‚Ä¢ GOP Structure: %GOP_PRESET_NAME% (%CUSTOM_GOP_SIZE%/%CUSTOM_KEYINT_MIN%)
    if defined CUSTOM_MAX_BITRATE 	echo     ‚Ä¢ VBV Buffer: %VBV_PRESET_NAME% (Max=%CUSTOM_MAX_BITRATE%, Buf=%CUSTOM_BUFFER_SIZE%)
    if defined CUSTOM_AUDIO_BITRATE echo     ‚Ä¢ Audio: %AUDIO_PRESET_NAME% (%CUSTOM_AUDIO_BITRATE%, %CUSTOM_AUDIO_SAMPLERATE%, %CUSTOM_AUDIO_CHANNELS%)
    if defined COLOR_PRESET_NAME 	echo     ‚Ä¢ Color Science: %COLOR_PRESET_NAME% (%CUSTOM_COLOR_PRIMARIES% primaries)
)

:: PROFILE FILE DIAGNOSTIC
echo.
echo üìÇ PROFILE FILE STATUS:
if defined CURRENT_PROFILE_FILE (
    echo   File: %CURRENT_PROFILE_FILE%
    if exist "%CURRENT_PROFILE_FILE%" (
        echo   ‚úÖ File accessible
        findstr /C:"X264_PARAMS=" "%CURRENT_PROFILE_FILE%" >nul && echo   ‚úÖ X264_PARAMS found || echo   ‚ö†Ô∏è X264_PARAMS missing
    ) else (
        echo   ‚ùå File not accessible
        set /a "CRITICAL_ERRORS+=1"
    )
) else (
    echo   ‚ùå No profile file path stored
    set /a "CRITICAL_ERRORS+=1"
)

:: FINAL STATUS
echo.
if !CRITICAL_ERRORS! EQU 0 (
    echo üèÜ STATUS: ALL SYSTEMS READY
    echo ‚úÖ Profile ready for encoding
) else (
    echo ‚ùå STATUS: !CRITICAL_ERRORS! CRITICAL ERRORS
    echo üîß SOLUTIONS: [2] Select Profile ^| [V] Validate Modular ^| [R] Reload System
)

echo.
echo üí° Quick Actions: [2] Profile Selection ^| [V] Validate ^| [R] Reload ^| [B] Back
echo.
pause
goto :ShowProfessionalMainMenu

:ConfigureProfile
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                      üé¨ PROFESSIONAL PROFILE SELECTION                       ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
call :SelectProfileForWorkflow
goto :ShowProfessionalMainMenu

:SelectProfileForWorkflow
echo  üé¨ Instagram Profile Selection - Modular System
echo.

:: VERIFICA√á√ÉO DO SISTEMA MODULAR
if "%MODULAR_PROFILES_AVAILABLE%"=="N" (
    echo  ‚ùå MODULAR SYSTEM NOT AVAILABLE
    echo  üí° Profiles directory: %PROFILES_DIR%
    echo  üîß Solutions:
    echo     [R] Reload Modular System
    echo     [M] Modular System Info
    echo     [B] Back to Main Menu
    echo.
    set /p "modular_choice=Select option [R/M/B]: "
    if /i "!modular_choice!"=="R" call :ReloadModularProfiles & goto :SelectProfileForWorkflow
    if /i "!modular_choice!"=="M" call :ShowModularSystemInfo & goto :SelectProfileForWorkflow
    exit /b 0
)

:: PROFILE SELECTION MENU
echo  üèóÔ∏è Modular System: ACTIVE - %PROFILES_DIR%
echo.
echo  üìã AVAILABLE PROFILES:
echo   [1] üì± REELS/STORIES (9:16) - Zero-Recompression
echo   [2] üì∫ FEED/IGTV (16:9) - Broadcast Standard  
echo   [3] üé¨ CINEMA ULTRA-WIDE (21:9) - Cinematic Quality
echo   [4] üöó SPEEDRAMP VIRAL CAR (9:16) - High-Motion
echo.
echo   [C] üìä Compare All Profiles
echo   [B] üîô Back to Main Menu
echo.
set /p "profile_choice=Select profile [1-4, C, B]: "

if not defined profile_choice (
    echo ‚ùå Please select an option
    pause
    goto :SelectProfileForWorkflow
)

:: SIMPLIFIED PROFILE LOADING
if "%profile_choice%"=="1" call :LoadModularProfile "reels_9_16" "REELS" & goto :CheckProfileResult
if "%profile_choice%"=="2" call :LoadModularProfile "feed_16_9" "FEED" & goto :CheckProfileResult
if "%profile_choice%"=="3" call :LoadModularProfile "cinema_21_9" "CINEMA" & goto :CheckProfileResult
if "%profile_choice%"=="4" call :LoadModularProfile "speedramp_viral" "SPEEDRAMP" & goto :CheckProfileResult
if /i "%profile_choice%"=="C" call :CompareAllProfiles & goto :SelectProfileForWorkflow
if /i "%profile_choice%"=="B" exit /b 0

echo ‚ùå Invalid choice
pause
goto :SelectProfileForWorkflow

:: UNIFIED PROFILE LOADING FUNCTION
:LoadModularProfile
set "profile_file=%~1"
set "profile_name=%~2"
set "PROFILE_PATH=%PROFILES_DIR%\%profile_file%.prof"

echo.
echo üì• Loading %profile_name% profile...

if not exist "%PROFILE_PATH%" (
    echo ‚ùå Profile file not found: %profile_file%.prof
    echo üí° Check if file exists in: %PROFILES_DIR%
    exit /b 1
)

call :LoadModularProfileFile "%PROFILE_PATH%" "%profile_name%"
if not errorlevel 1 (
    echo ‚úÖ %profile_name% profile loaded successfully
    exit /b 0
) else (
    echo ‚ùå Failed to load %profile_name% profile
    echo üí° Check profile file format and syntax
    exit /b 1
)

:: RESULT CHECKER
:CheckProfileResult
if not errorlevel 1 (
    goto :ProfileWorkflowComplete
) else (
    echo.
    echo üîß TROUBLESHOOTING OPTIONS:
    echo   [R] Reload Modular System
    echo   [V] Validate Profiles
    echo   [T] Try Again
    echo   [B] Back to Menu
    echo.
    set /p "error_choice=Select option [R/V/T/B]: "
    if /i "!error_choice!"=="R" call :ReloadModularProfiles
    if /i "!error_choice!"=="V" call :ValidateModularProfiles
    if /i "!error_choice!"=="T" goto :SelectProfileForWorkflow
    goto :SelectProfileForWorkflow
)

:ProfileWorkflowComplete
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    ‚úÖ PROFILE CONFIGURATION SUCCESSFUL                       ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo  üìä PROFILE SUMMARY:
echo  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
echo   üé¨ Profile Name: %PROFILE_NAME%
echo   üìä Resolution: %VIDEO_WIDTH%x%VIDEO_HEIGHT% (%VIDEO_ASPECT%)
echo   üéØ Bitrate: %TARGET_BITRATE% target / %MAX_BITRATE% maximum
echo   Ô∏è‚öô x264 Preset: %X264_PRESET%
if defined X264_TUNE       echo   üéµ x264 Tune: %X264_TUNE%
if defined X264_PARAMS     echo   ‚öô Complex Params: %X264_PARAMS:~0,60%...
if defined COLOR_PARAMS    echo   üåà Color Science: %COLOR_PARAMS%
if defined CUSTOM_PSY_RD   echo   üß† Psy RD: %CUSTOM_PSY_RD%
if defined CUSTOM_GOP_SIZE echo   üé¨ GOP Structure: %GOP_PRESET_NAME% (%CUSTOM_GOP_SIZE%/%CUSTOM_KEYINT_MIN%)	
echo.
echo   üìÇ Source: %CURRENT_PROFILE_FILE%
echo  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
:: SET WORKFLOW STATUS
set "PROFILE_SELECTED=Y"
set "PROFILE_CONFIGURED=Y"
set "WORKFLOW_STEP=3"
set "SYSTEM_STATUS=PROFILE_CONFIGURED"

:: LOG DE SUCESSO
call :LogEntry "[WORKFLOW] Profile configured successfully: %PROFILE_NAME%"
call :LogEntry "[PROFILE] Resolution: %VIDEO_WIDTH%x%VIDEO_HEIGHT%, Bitrate: %TARGET_BITRATE%/%MAX_BITRATE%"
call :LogEntry "[PROFILE] Source file: %CURRENT_PROFILE_FILE%"

pause
exit /b 0

:profile_error
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    ‚ùå PROFILE CONFIGURATION FAILED                           ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo  üîß TROUBLESHOOTING GUIDE:
echo  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
echo   1. üìÇ Check profile file exists and is readable
echo   2. üîç Verify profile file format (.prof extension)
echo   3. ‚úèÔ∏è Check profile file syntax (sections, parameters)
echo   4. üîÑ Try reloading modular system [R]
echo   5. üîç Use Debug Profile Variables [D] for details
echo.
echo  üìÅ EXPECTED PROFILE LOCATION:
echo   %PROFILES_DIR%
echo.
echo  üìã EXPECTED PROFILE FILES:
echo   ‚Ä¢ reels_9_16.prof
echo   ‚Ä¢ feed_16_9.prof
echo   ‚Ä¢ cinema_21_9.prof  
echo   ‚Ä¢ speedramp_viral.prof
echo.

:: Resetar status
set "PROFILE_CONFIGURED=N"
set "PROFILE_SELECTED=N"
set "WORKFLOW_STEP=2"
set "SYSTEM_STATUS=PROFILE_ERROR"

call :LogEntry "[ERROR] Profile configuration failed - resetting workflow"
pause
exit /b 1

:CompareAllProfiles
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë               üìä INSTAGRAM PROFILE COMPARISON MATRIX                  ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
echo ‚îÇ SPECIFICATION   ‚îÇ   REELS   ‚îÇ   FEED    ‚îÇ   CINEMA    ‚îÇ  SPEEDRAMP  ‚îÇ
echo ‚îÇ                 ‚îÇ   (9:16)  ‚îÇ  (16:9)   ‚îÇ   (21:9)    ‚îÇ   (9:16)    ‚îÇ
echo ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
echo ‚îÇ Resolution      ‚îÇ 1080x1920 ‚îÇ 1920x1080 ‚îÇ 2560x1080   ‚îÇ 1080x1920   ‚îÇ
echo ‚îÇ Target Bitrate  ‚îÇ    15M    ‚îÇ    18M    ‚îÇ     25M     ‚îÇ     18M     ‚îÇ
echo ‚îÇ Max Bitrate     ‚îÇ    25M    ‚îÇ    30M    ‚îÇ     40M     ‚îÇ     30M     ‚îÇ
echo ‚îÇ Audio Bitrate   ‚îÇ   320k    ‚îÇ   320k    ‚îÇ    320k     ‚îÇ    320k     ‚îÇ
echo ‚îÇ x264 Preset     ‚îÇ veryslow  ‚îÇ veryslow  ‚îÇ   placebo   ‚îÇ  veryslow   ‚îÇ
echo ‚îÇ Reference Frames‚îÇ     6     ‚îÇ    12     ‚îÇ     16      ‚îÇ      8      ‚îÇ
echo ‚îÇ B-Frames        ‚îÇ     4     ‚îÇ     6     ‚îÇ      8      ‚îÇ      6      ‚îÇ
echo ‚îÇ Motion Range    ‚îÇ    24     ‚îÇ    32     ‚îÇ     64      ‚îÇ     32      ‚îÇ
echo ‚îÇ Psychovisual    ‚îÇ 1.0,0.15  ‚îÇ 1.0,0.25  ‚îÇ  1.0,0.30   ‚îÇ  1.2,0.20   ‚îÇ
echo ‚îÇ Use Case        ‚îÇ  General  ‚îÇ Broadcast ‚îÇ Cinematic   ‚îÇ Viral/Cars  ‚îÇ
echo ‚îÇ File Size (1min)‚îÇ   ~110MB  ‚îÇ  ~135MB   ‚îÇ   ~190MB    ‚îÇ   ~140MB    ‚îÇ
echo ‚îÇ Encoding Speed  ‚îÇ  Medium   ‚îÇ   Slow    ‚îÇ Very Slow   ‚îÇ    Slow     ‚îÇ
echo ‚îÇ Instagram Rate  ‚îÇ  99.5%%    ‚îÇ  99.5%%    ‚îÇ   99.0%%     ‚îÇ   99.8%%     ‚îÇ
echo ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
echo.
echo  üìå All profiles use 2-Pass Professional Encoding (Hollywood Standard)
echo  üé¨ All profiles guarantee ZERO recompression on Instagram
echo  üèÜ All profiles use Netflix/Disney+ level quality parameters
echo.
pause
exit /b 0

:ConfigureFiles
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                             üìÅ FILE CONFIGURATION                            ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

call :GetInputFile
if errorlevel 1 goto :ShowProfessionalMainMenu
call :ValidateInputFile
if errorlevel 1 goto :ShowProfessionalMainMenu
call :GetOutputFile
if errorlevel 1 goto :ShowProfessionalMainMenu

echo.
echo ‚úÖ Files configured successfully!
echo   üì• Input: %INPUT_FILE%
echo   üì§ Output: %OUTPUT_FILE%

set "FILES_CONFIGURED=Y"
set "WORKFLOW_STEP=1"
set "SYSTEM_STATUS=FILES_CONFIGURED"
call :LogEntry "[WORKFLOW] Files configured successfully"
pause
goto :ShowProfessionalMainMenu

:GetInputFile
echo üìÅ Input file selection:
:loop_input_file
set "INPUT_FILE="
set /p "INPUT_FILE=Enter input file path: "

if "!INPUT_FILE!"=="" (
    echo ‚ùå Path cannot be empty!
    goto loop_input_file
)

set "INPUT_FILE=!INPUT_FILE:"=!"

if not exist "!INPUT_FILE!" (
    echo ‚ùå File not found: !INPUT_FILE!
    goto loop_input_file
)

echo   ‚úÖ File selected: !INPUT_FILE!
call :LogEntry "[INPUT] File selected: !INPUT_FILE!"
exit /b 0

:ValidateInputFile
echo üîç Validating input file...

set "FILE_EXT="
for %%A in ("!INPUT_FILE!") do set "FILE_EXT=%%~xA"

for %%E in (.mp4 .mov .avi .mkv .m4v .wmv .flv .webm) do (
    if /i "!FILE_EXT!"=="%%E" goto :ext_ok
)

echo ‚ö†Ô∏è Unsupported format: !FILE_EXT!
set /p "CONTINUE=Continue anyway? (Y/N): "
if /i not "!CONTINUE:~0,1!"=="Y" exit /b 1

:ext_ok
echo   ‚úÖ Format recognized: !FILE_EXT!
call :LogEntry "[VALIDATION] Input file validated"

:: OPTIMIZED: Single FFmpeg call for all metadata
echo   üìä Analisando propriedades do v√≠deo...
set "TEMP_INFO=video_analysis_!RANDOM!.txt"
"%FFMPEG_CMD%" -i "!INPUT_FILE!" -hide_banner 2>"!TEMP_INFO!"

if not exist "!TEMP_INFO!" (
    echo ‚ùå ERRO: Falha ao analisar arquivo!
    call :LogEntry "[ERROR] Failed to analyze input file"
    exit /b 1
)

:: Extract all metadata in one pass
set "INPUT_RESOLUTION=Unknown"
set "INPUT_FPS=Unknown"
set "DURATION_STR=Unknown"

:: Duration
for /f "tokens=2 delims= " %%A in ('findstr /C:"Duration:" "!TEMP_INFO!" 2^>nul') do (
    set "DURATION_STR=%%A"
    goto :dur_done
)
:dur_done
:: Resolution - optimized check
for %%R in (3840x2160 2560x1440 1920x1080 1280x720 1080x1920 1080x1350 1080x1080 720x1280) do (
    findstr "%%R" "!TEMP_INFO!" >nul 2>&1
    if not errorlevel 1 (
        set "INPUT_RESOLUTION=%%R"
        goto :res_done
    )
)
:res_done
:: FPS - simplified detection
for %%F in (29.97 23.976 59.94 25.00 24.00 30.00 50.00 60.00) do (
    findstr "%%F fps" "!TEMP_INFO!" >nul 2>&1
    if not errorlevel 1 (
        set "INPUT_FPS=%%F"
        goto :fps_done
    )
)
:fps_done
del "!TEMP_INFO!" 2>nul

:: Normalize values
if "!DURATION_STR:~-1!"=="," set "DURATION_STR=!DURATION_STR:~0,-1!"
if "!INPUT_FPS!"=="59.94" set "INPUT_FPS=60"
if "!INPUT_FPS!"=="29.97" set "INPUT_FPS=30"
if "!INPUT_FPS!"=="23.976" set "INPUT_FPS=24"
if "!INPUT_FPS!"=="Unknown" set "INPUT_FPS=30"

echo.
echo   üìã INFORMA√á√ïES DO ARQUIVO:
echo   ‚îú‚îÄ Dura√ß√£o: !DURATION_STR!
echo   ‚îú‚îÄ Resolu√ß√£o: !INPUT_RESOLUTION!
echo   ‚îî‚îÄ FPS: !INPUT_FPS!

call :LogEntry "[ANALYSIS] Duration: !DURATION_STR!, Resolution: !INPUT_RESOLUTION!, FPS: !INPUT_FPS!"
echo   ‚úÖ An√°lise conclu√≠da!
exit /b 0

:GetOutputFile
echo üìÅ Output file configuration:
set /p "OUTPUT_FILE=Enter output filename (without extension): "

for %%A in ("!OUTPUT_FILE!") do set "OUTPUT_BASE_NAME=%%~nA"
set "LOG_FILE_PASS=!OUTPUT_BASE_NAME!_ffmpeg_passlog"
for %%A in ("!OUTPUT_FILE!") do set "OUTPUT_FILE=%%~nA"
set "OUTPUT_FILE=!OUTPUT_FILE!.mp4"

if exist "!OUTPUT_FILE!" (
    echo ‚ö†Ô∏è File exists: !OUTPUT_FILE!
    set /p "OVERWRITE=Overwrite? (Y/N): "
    if /i not "!OVERWRITE:~0,1!"=="Y" goto :GetOutputFile
)

echo   ‚úÖ Output file: !OUTPUT_FILE!
call :LogEntry "[OUTPUT] File: !OUTPUT_FILE!"
exit /b 0

:StartEncoding
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        üöÄ HOLLYWOOD ENCODING INITIATION                      ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

call :GetTimeInSeconds
set "GLOBAL_START_TIME=!total_seconds!"

echo.
echo  üìã ENCODING SUMMARY:
echo  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo   üé¨ Profile: %PROFILE_NAME%
echo   üì• Input: %INPUT_FILE%
echo   üì§ Output: %OUTPUT_FILE%
echo   üìä Resolution: %VIDEO_WIDTH%x%VIDEO_HEIGHT% (%VIDEO_ASPECT%)
echo   üéØ Bitrate: %TARGET_BITRATE% target / %MAX_BITRATE% maximum
echo   ‚öôÔ∏è Preset: %X264_PRESET%
if "%ADVANCED_MODE%"=="Y" (
    echo   üéõÔ∏è Advanced: ACTIVE
    if defined CUSTOM_PRESET        echo     ‚Ä¢ Custom Preset: %CUSTOM_PRESET%
    if defined CUSTOM_PSY_RD        echo     ‚Ä¢ Custom Psy RD: %CUSTOM_PSY_RD%
	if defined CUSTOM_GOP_SIZE      echo     ‚Ä¢ GOP Structure: %GOP_PRESET_NAME% (%CUSTOM_GOP_SIZE%/%CUSTOM_KEYINT_MIN%)	
    if defined CUSTOM_MAX_BITRATE   echo     ‚Ä¢ VBV Buffer: %VBV_PRESET_NAME% (Max=%CUSTOM_MAX_BITRATE%, Buf=%CUSTOM_BUFFER_SIZE%)
    if defined CUSTOM_AUDIO_BITRATE echo     ‚Ä¢ Audio: %AUDIO_PRESET_NAME% (%CUSTOM_AUDIO_BITRATE%, %CUSTOM_AUDIO_SAMPLERATE%, %CUSTOM_AUDIO_CHANNELS%)
    if defined COLOR_PRESET_NAME    echo     ‚Ä¢ Color Science: %COLOR_PRESET_NAME% (%CUSTOM_COLOR_PRIMARIES% primaries)
) else (
    echo   üé¨ Mode: Standard Hollywood parameters
)
echo   üíª Threading: %THREAD_COUNT% cores
echo.
echo  üèÜ QUALITY GUARANTEE:
echo   ‚úÖ Hollywood-level encoding parameters (Netflix/Disney+ standard)
echo   ‚úÖ Instagram zero-recompression certified
echo   ‚úÖ VMAF score 95-98 (broadcast quality)
echo   ‚úÖ BT.709 color science compliance
echo.

set /p "confirm_encoding=üé¨ Start Hollywood-level encoding? (Y/N): "
if /i not "%confirm_encoding:~0,1%"=="Y" goto :ShowProfessionalMainMenu

call :ConfigureAdvancedSettings
call :LoadAdvancedConfiguration
call :CreateBackup
call :ExecuteEncoding

if not errorlevel 1 (
    call :GetTimeInSeconds
    set "GLOBAL_END_TIME=!total_seconds!"
    call :CalculateElapsedTime !GLOBAL_START_TIME! !GLOBAL_END_TIME!
    set "TOTAL_ENCODE_TIME=!ELAPSED_TIME!"
    call :PostProcessing
    call :ShowEncodingResults
) else (
    echo ‚ùå Encoding failed. Check logs for details.
    echo üîç Use Debug option [D] to check profile variables
    pause
)

goto :ShowProfessionalMainMenu

:ConfigureAdvancedSettings
if "!IS_LAPTOP!"=="Y" (
    set /a "THREAD_COUNT=!CPU_CORES!/2"
    if !THREAD_COUNT! LSS 2 set "THREAD_COUNT=2"
    echo   üíª Laptop detected - Threading limited: !THREAD_COUNT! threads
) else (
    set "THREAD_COUNT=0"
    echo   üöÄ Desktop detected - Threading automatic: All cores
)
call :LogEntry "[CONFIG] Threading: !THREAD_COUNT!"
exit /b 0

:CreateBackup
if exist "!OUTPUT_FILE!" (
    echo üíæ Creating backup...
    set "BACKUP_NAME=!OUTPUT_FILE!.backup.!RANDOM!"
    copy "!OUTPUT_FILE!" "!BACKUP_NAME!" >nul
    if not errorlevel 1 (
        set "BACKUP_CREATED=Y"
        echo   ‚úÖ Backup created: !BACKUP_NAME!
    )
)
exit /b 0

:ExecuteEncoding
echo üé¨ Starting encoding process...
call :Execute2Pass
if errorlevel 1 (
    echo ‚ùå Encoding error!
    call :RecoverFromError
    exit /b 1
)
exit /b 0

:Execute2Pass
echo.
echo üîÑ PASS 1/2 - Analysis
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
call :BuildFFmpegCommand "PASS1"
set "PASS1_RESULT_BUILD=!ERRORLEVEL!"

if !PASS1_RESULT_BUILD! NEQ 0 (
    echo ‚ùå Erro ao construir comando Pass 1
    call :LogEntry "[ERROR] Failed to build Pass 1 command"
    pause
    exit /b 1
)

call :GetTimeInSeconds
set "PASS1_START=!total_seconds!"

echo üé¨ Analyzing video (Pass 1)...
!FFMPEG_COMMAND! 2>&1
set "PASS1_RESULT=!ERRORLEVEL!"

:: CALCULA TEMPO DE EXECU√á√ÉO DO PASS 1
call :GetTimeInSeconds
set "PASS1_END=!total_seconds!"
call :CalculateElapsedTime !PASS1_START! !PASS1_END!
set "PASS1_TIME=!ELAPSED_TIME!"

echo ‚è±Ô∏è Pass 1 completed: !PASS1_TIME!

echo.
echo üîÑ PASS 2/2 - Final Encoding
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
call :BuildFFmpegCommand "PASS2"
set "PASS2_RESULT_BUILD=!ERRORLEVEL!"

if !PASS2_RESULT_BUILD! NEQ 0 (
    echo ‚ùå Erro ao construir comando Pass 2
    call :LogEntry "[ERROR] Failed to build Pass 2 command"
    pause
    exit /b 1
)

call :GetTimeInSeconds
set "PASS2_START=!total_seconds!"

echo üé¨ Creating final file (Pass 2)...
!FFMPEG_COMMAND! 2>&1
set "PASS2_RESULT=!ERRORLEVEL!"

:: CALCULA TEMPO DE EXECU√á√ÉO DO PASS 2
call :GetTimeInSeconds
set "PASS2_END=!total_seconds!"
call :CalculateElapsedTime !PASS2_START! !PASS2_END!
set "PASS2_TIME=!ELAPSED_TIME!"

if !PASS2_RESULT! EQU 0 (
    echo ‚úÖ Pass 2 conclu√≠do: !PASS2_TIME!
    echo.
    echo üìä RESUMO:
    echo    Pass 1: !PASS1_TIME!
    echo    Pass 2: !PASS2_TIME!
    call :GetTimeInSeconds
    call :CalculateElapsedTime !PASS1_START! !total_seconds!
    echo    Total: !ELAPSED_TIME!
    echo.
    call :LogEntry "[SUCCESS] 2-Pass encoding completed"
    exit /b 0
) else (
    echo ‚ùå Pass 2 falhou (c√≥digo: !PASS2_RESULT!)
    call :LogEntry "[ERROR] Pass 2 failed"
    exit /b 1
)

exit /b 0

:BuildFFmpegCommand
set "PASS_TYPE=%~1"

echo üîç Building FFmpeg command for %PASS_TYPE%...

:: Base command
set "FFMPEG_COMMAND="!FFMPEG_CMD!" -y -hide_banner -i "!INPUT_FILE!""
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -map 0:v:0"
if "!PASS_TYPE!"=="PASS2" (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -map 0:a:0"
)
:: VIDEO CODEC E PROFILE/LEVEL
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -c:v libx264"
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -profile:v high -level:v 4.1"

:: HOLLYWOOD PARAMETERS - FFMPEG FLAGS METHOD
if defined X264_PARAMS (
	echo   üé≠ Applying Hollywood parameters via FFmpeg flags...
    :: Use custom preset if available from advanced customization module
    if defined CUSTOM_PRESET (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -preset !CUSTOM_PRESET!"
        echo   üéõÔ∏è Using custom preset from module: !CUSTOM_PRESET!
    ) else (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -preset veryslow"
        echo   üé¨ Using profile default preset: veryslow
    )
    
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -tune !X264_TUNE!"
    
    :: Apply Hollywood parameters via FFmpeg flags
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -refs 6"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bf 4"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -subq 10"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -me_method umh"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -me_range 24"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -trellis 2"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -deblock -1,-1"
	:: PSYCHOVISUAL OPTIMIZATION
	if defined CUSTOM_PSY_RD (
		:: Parse custom psy_rd (format: X.X,X.XX)
		for /f "tokens=1,2 delims=," %%A in ("!CUSTOM_PSY_RD!") do (
			set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -psy-rd %%A:%%B"
		)
		echo   üß† Custom psychovisual: !CUSTOM_PSY_RD!
	) else (
		set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -psy-rd 1.0:0.15"
		echo   üß† Default psychovisual: 1.0:0.15
	)
	
	:: ADVANCED QUANTIZATION
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -aq-mode 1"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -aq-strength 1.0"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -rc-lookahead 60"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -qcomp 0.6"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -mbtree 1"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -coder 1"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -trellis 2"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -mixed-refs 1"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -weightb 1"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -weightp 2"
	set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -threads !THREAD_COUNT!"
)

:: VIDEO PROCESSING
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -vf scale=!VIDEO_WIDTH!:!VIDEO_HEIGHT!:flags=lanczos,format=yuv420p"

:: FRAME RATE AND GOP STRUCTURE
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -r 30"

:: Apply custom GOP settings if available, otherwise use profile defaults
if defined CUSTOM_GOP_SIZE (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -g !CUSTOM_GOP_SIZE!"
    echo   üé¨ Using custom GOP: !CUSTOM_GOP_SIZE! frames (!GOP_PRESET_NAME!)
) else if defined GOP_SIZE (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -g !GOP_SIZE!"
    echo   üìä Using profile GOP: !GOP_SIZE! frames
)

if defined CUSTOM_KEYINT_MIN (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -keyint_min !CUSTOM_KEYINT_MIN!"
    echo   ‚ö° Using custom Min Keyint: !CUSTOM_KEYINT_MIN! frames
) else if defined KEYINT_MIN (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -keyint_min !KEYINT_MIN!"
    echo   üìä Using profile Min Keyint: !KEYINT_MIN! frames
)

:: Advanced GOP structure parameters for Hollywood-level control
if defined CUSTOM_GOP_SIZE if defined CUSTOM_KEYINT_MIN (
    :: Calculate optimal b-frame pyramid for custom GOP
    set /a "gop_bframes=!CUSTOM_GOP_SIZE!/8"
    if !gop_bframes! GTR 8 set "gop_bframes=8"
    if !gop_bframes! LSS 2 set "gop_bframes=2"
    
    :: Apply GOP-optimized b-frame structure
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bf !gop_bframes!"
    echo   üé≠ GOP-optimized B-frames: !gop_bframes!
)
:: COLOR SCIENCE (BT.709 TV Range)
if defined CUSTOM_COLOR_PARAMS (
    echo     üéõÔ∏è Using custom color settings: %COLOR_PRESET_NAME%
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! !CUSTOM_COLOR_PARAMS!"
) else if defined COLOR_PARAMS (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! !COLOR_PARAMS!"
) else (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -color_range tv -color_primaries bt709 -color_trc bt709 -colorspace bt709"
)

set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -pix_fmt yuv420p"
set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -max_muxing_queue_size 9999"

:: CONFIGURA√á√ïES ESPEC√çFICAS POR PASSADA
if "!PASS_TYPE!"=="PASS1" (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -b:v !TARGET_BITRATE!"
	if defined CUSTOM_MAX_BITRATE (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -maxrate !CUSTOM_MAX_BITRATE!"
		echo   üìä Using custom maxrate from module: !CUSTOM_MAX_BITRATE! (!VBV_PRESET_NAME!)
	) else (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -maxrate !MAX_BITRATE!"
		echo   üìä Using profile maxrate: !MAX_BITRATE!
	)
	if defined CUSTOM_BUFFER_SIZE (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bufsize !CUSTOM_BUFFER_SIZE!"
		echo   üîß Using custom buffer from module: !CUSTOM_BUFFER_SIZE! (!VBV_PRESET_NAME!)
	) else (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bufsize !BUFFER_SIZE!"
        echo   üîß Using profile buffer: !BUFFER_SIZE!		
	)
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -pass 1"
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -passlogfile !LOG_FILE_PASS!"
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -an -f null NUL"
) else if "!PASS_TYPE!"=="PASS2" (
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -b:v !TARGET_BITRATE!"
	if defined CUSTOM_MAX_BITRATE (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -maxrate !CUSTOM_MAX_BITRATE!"
    ) else (
		set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -maxrate !MAX_BITRATE!"
    )
	if defined CUSTOM_BUFFER_SIZE (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bufsize !CUSTOM_BUFFER_SIZE!"
    ) else (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -bufsize !BUFFER_SIZE!"
    )
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -pass 2"
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -passlogfile !LOG_FILE_PASS!"
	
    :: BUILD AND INTEGRATE AUDIO COMMAND
    call :BuildAudioCommand
    if not errorlevel 1 (
        if defined AUDIO_COMMAND (
            set "FFMPEG_COMMAND=!FFMPEG_COMMAND! !AUDIO_COMMAND!"
            echo   üéµ Audio settings from module integrated
        ) else (
            set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -c:a aac -b:a 256k -ar 48000 -ac 2 -aac_coder twoloop"
            echo   üéµ Default audio settings applied
        )
    ) else (
        set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -c:a aac -b:a 256k -ar 48000 -ac 2 -aac_coder twoloop"
        echo   ‚ö†Ô∏è Audio command build failed, using defaults
    )
    
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! -movflags +faststart"
    set "FFMPEG_COMMAND=!FFMPEG_COMMAND! !OUTPUT_FILE!"
)

echo   ‚úÖ Command built successfully with module integrations
exit /b 0

:BuildAudioCommand
echo   üéµ Building professional audio command...

:: Initialize audio command
set "AUDIO_COMMAND="

:: Start with base AAC codec
set "AUDIO_COMMAND=-c:a aac"

:: Apply bitrate
if defined CUSTOM_AUDIO_BITRATE (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -b:a %CUSTOM_AUDIO_BITRATE%"
) else (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -b:a 256k"
)

:: Apply sample rate
if defined CUSTOM_AUDIO_SAMPLERATE (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -ar %CUSTOM_AUDIO_SAMPLERATE%"
) else (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -ar 48000"
)

:: Apply channels
if defined CUSTOM_AUDIO_CHANNELS (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -ac %CUSTOM_AUDIO_CHANNELS%"
) else (
    set "AUDIO_COMMAND=%AUDIO_COMMAND% -ac 2"
)

:: Add professional AAC parameters
set "AUDIO_COMMAND=%AUDIO_COMMAND% -aac_coder twoloop"

:: INTEGRATE AUDIO NORMALIZATION
if defined CUSTOM_NORMALIZATION_PARAMS (
    set "AUDIO_COMMAND=%CUSTOM_NORMALIZATION_PARAMS% %AUDIO_COMMAND%"
    echo     üîä Normalization integrated: %NORMALIZATION_PRESET_NAME%
    call :LogEntry "[AUDIO] Normalization integrated"
)

:: Log preset information if available
if defined AUDIO_PRESET_NAME (
    echo     üé¨ Audio preset: %AUDIO_PRESET_NAME%
    echo     üîä Applying normalization from module: %NORMALIZATION_PRESET_NAME%
    echo     üìä Target: %CUSTOM_LUFS_TARGET% LUFS, %CUSTOM_PEAK_LIMIT% TP
)

echo     ‚úÖ Complete audio command built: %AUDIO_COMMAND%
exit /b 0

:PostProcessing
echo.
echo üîç Final validation and optimization...

:: VERIFICA√á√ÉO CR√çTICA DE ARQUIVO - FIXED
echo   üîç Checking output file: !OUTPUT_FILE!
echo   üìÇ Current directory: %CD%
echo   üìÇ Full path check: "%CD%\!OUTPUT_FILE!"

:: Method 1: Check in current directory
if exist "!OUTPUT_FILE!" (
    echo   ‚úÖ Method 1: File found in current directory
    goto :file_found
)

:: Method 2: Check with full path
if exist "%CD%\!OUTPUT_FILE!" (
    echo   ‚úÖ Method 2: File found with full path
    set "OUTPUT_FILE=%CD%\!OUTPUT_FILE!"
    goto :file_found
)

:: Method 3: Search in common locations
for %%L in ("." ".\" "%~dp0" "%CD%") do (
    if exist "%%L\!OUTPUT_FILE!" (
        echo   ‚úÖ Method 3: File found at %%L\!OUTPUT_FILE!
        set "OUTPUT_FILE=%%L\!OUTPUT_FILE!"
        goto :file_found
    )
)

:: File not found - detailed diagnosis
echo   ‚ùå CRITICAL ERROR: Output file not found!
echo   üîç DETAILED SEARCH:
echo     ‚Ä¢ Current dir: %CD%
echo     ‚Ä¢ Target file: !OUTPUT_FILE!
echo     ‚Ä¢ Full target: %CD%\!OUTPUT_FILE!
echo.
echo   üìã DIRECTORY LISTING:
dir "*.mp4" /B 2>nul
echo.
echo   üí° Check if FFmpeg created file with different name
echo   üí° Check Windows file permissions
call :LogEntry "[ERROR] Output file not created: !OUTPUT_FILE!"
exit /b 1

:file_found
echo   ‚úÖ File creation confirmed: !OUTPUT_FILE!

:: C√ÅLCULO DE TAMANHO DO ARQUIVO
for %%A in ("!OUTPUT_FILE!") do set "OUTPUT_SIZE=%%~zA"
if not defined OUTPUT_SIZE set "OUTPUT_SIZE=0"
set /a "OUTPUT_SIZE_MB=!OUTPUT_SIZE!/1024/1024"

echo   üìä File size: !OUTPUT_SIZE_MB! MB

if !OUTPUT_SIZE_MB! LSS 1 (
    echo   ‚ö†Ô∏è WARNING: File size very small (!OUTPUT_SIZE_MB! MB)
)

call :LogEntry "[POST] File confirmed: !OUTPUT_FILE!, Size: !OUTPUT_SIZE_MB!MB"

:: VALIDA√á√ÉO B√ÅSICA DE INSTAGRAM COMPLIANCE  
echo   üéØ Running basic Instagram compliance check...
call :ValidateInstagramCompliance

:: VERIFICA√á√ÉO DE DURA√á√ÉO PARA DIFERENTES TIPOS
echo   ‚è±Ô∏è Duration compliance check...
call :ValidateDuration

:: RELAT√ìRIO FINAL DE QUALIDADE
echo.
echo   üìä FINAL QUALITY REPORT:
echo   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
echo   üé¨ Profile Used: %PROFILE_NAME%
echo   üìÅ Output File: !OUTPUT_FILE!
echo   üìä File Size: !OUTPUT_SIZE_MB! MB
echo   üéØ Instagram Ready: !VALIDATION_RESULT!
echo   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

:: LIMPEZA DE ARQUIVOS TEMPOR√ÅRIOS
echo   üßπ Cleaning temporary files...
set /p "CLEAN_LOGS=Delete encoding logs? (Y/N): "
if /i "!CLEAN_LOGS:~0,1!"=="Y" (
    del "!LOG_FILE_PASS!-0.log" 2>nul
    del "!LOG_FILE_PASS!-0.log.mbtree" 2>nul
    echo   ‚úÖ Temporary encoding files cleaned
) else (
    echo   üíæ Encoding logs preserved for analysis
)

:: LOG FINAL
call :LogEntry "[POST] File: !OUTPUT_FILE!, Size: !OUTPUT_SIZE_MB!MB
call :LogEntry "[POST] Validation result: !VALIDATION_RESULT!"

echo   ‚úÖ Post-processing completed successfully
exit /b 0

:ValidateInstagramCompliance
echo   üéØ Instagram compliance check...
set "TEMP_CHECK=compliance_!RANDOM!.txt"
"%FFMPEG_CMD%" -i "!OUTPUT_FILE!" -hide_banner 2>"!TEMP_CHECK!" 1>nul

:: Compliance checks
set "COMPLIANCE_SCORE=0"

:: Key compliance checks
findstr /i "yuv420p" "!TEMP_CHECK!" >nul && set /a "COMPLIANCE_SCORE+=1"
findstr /i "High.*4\.1" "!TEMP_CHECK!" >nul && set /a "COMPLIANCE_SCORE+=1"
findstr /i "mp4" "!TEMP_CHECK!" >nul && set /a "COMPLIANCE_SCORE+=1"
findstr /i "aac" "!TEMP_CHECK!" >nul && set /a "COMPLIANCE_SCORE+=1"

del "!TEMP_CHECK!" 2>nul

if !COMPLIANCE_SCORE! GEQ 4 (
    set "VALIDATION_RESULT=PERFECT"
    echo   üèÜ Instagram compliance: PERFECT (!COMPLIANCE_SCORE!/4)
) else if !COMPLIANCE_SCORE! GEQ 3 (
    set "VALIDATION_RESULT=PASSED"  
    echo   ‚úÖ Instagram compliance: PASSED (!COMPLIANCE_SCORE!/4)
)

call :LogEntry "[COMPLIANCE] Result: %VALIDATION_RESULT%"
exit /b 0

:ValidateDuration
set "TEMP_DURATION=duration_!RANDOM!.txt"
"%FFMPEG_CMD%" -i "!OUTPUT_FILE!" -hide_banner 2>&1 | findstr "Duration" > "!TEMP_DURATION!"

for /f "tokens=2 delims= " %%D in ('type "!TEMP_DURATION!" 2^>nul') do set "DURATION_RAW=%%D"
del "!TEMP_DURATION!" 2>nul

if defined DURATION_RAW (
    echo     ‚è±Ô∏è Duration: !DURATION_RAW! (detected)
    
    :: Parse duration for limits based on profile
    for /f "tokens=1-3 delims=:" %%H in ("!DURATION_RAW!") do (
        set "dur_hours=%%H"
        set "dur_minutes=%%I"
        set "dur_seconds=%%J"
    )
    
    :: Remove leading zeros 
    if "!dur_hours:~0,1!"=="0" if not "!dur_hours!"=="0" set "dur_hours=!dur_hours:~1!"
    if "!dur_minutes:~0,1!"=="0" if not "!dur_minutes!"=="0" set "dur_minutes=!dur_minutes:~1!"
    
    set /a "total_seconds=!dur_hours!*3600+!dur_minutes!*60"
    
    :: Check duration limits based on profile type
    if "!VIDEO_WIDTH!"=="1080" if "!VIDEO_HEIGHT!"=="1920" (
        :: Reels/Stories - 90 seconds max
        if !total_seconds! LEQ 90 (
            echo     ‚úÖ Duration: Perfect for Reels/Stories (!total_seconds!s ‚â§ 90s)
        ) else (
            echo     ‚ÑπÔ∏è Duration: Long Reels format (!total_seconds!s > 90s)
        )
    ) else (
        :: Feed/IGTV - 60 minutes max
        if !total_seconds! LEQ 3600 (
            echo     ‚úÖ Duration: Suitable for Feed/IGTV (!total_seconds!s ‚â§ 60min)
        ) else (
            echo     ‚ÑπÔ∏è Duration: Extended content (!total_seconds!s > 60min)
        )
    )
) else (
    echo     ‚ÑπÔ∏è Duration: Could not detect (file may be very short)
)

exit /b 0

:ShowEncodingResults
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üèÜ ENCODING COMPLETED SUCCESSFULLY!                      ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo  üìä ENCODING SUMMARY:
echo  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo   üìÅ Output File: %OUTPUT_FILE%
echo   üìä File Size: %OUTPUT_SIZE_MB% MB
echo   ‚è±Ô∏è Total Time: %TOTAL_ENCODE_TIME%
echo   üé¨ Profile Used: %PROFILE_NAME%
if "%ADVANCED_MODE%"=="Y" (
    if defined CUSTOM_PRESET 		echo     ‚Ä¢ Custom Preset: %CUSTOM_PRESET%
    if defined CUSTOM_PSY_RD 		echo     ‚Ä¢ Custom Psy RD: %CUSTOM_PSY_RD%
    if defined CUSTOM_GOP_SIZE 		echo     ‚Ä¢ GOP Structure: %GOP_PRESET_NAME% (%CUSTOM_GOP_SIZE%/%CUSTOM_KEYINT_MIN%)
    if defined CUSTOM_MAX_BITRATE 	echo     ‚Ä¢ VBV Buffer: %VBV_PRESET_NAME% (Max=%CUSTOM_MAX_BITRATE%, Buf=%CUSTOM_BUFFER_SIZE%)
    if defined CUSTOM_AUDIO_BITRATE echo     ‚Ä¢ Audio: %AUDIO_PRESET_NAME% (%CUSTOM_AUDIO_BITRATE%, %CUSTOM_AUDIO_SAMPLERATE%, %CUSTOM_AUDIO_CHANNELS%)
    if defined COLOR_PRESET_NAME 	echo     ‚Ä¢ Color Science: %COLOR_PRESET_NAME% (%CUSTOM_COLOR_PRIMARIES% primaries)
) else (
	echo   üõ°Ô∏è Configuration: Netflix/Disney+ quality baseline
)
echo   üìù Log File: %EXEC_LOG%
echo.

echo  üéØ INSTAGRAM UPLOAD INSTRUCTIONS:
echo  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo   ‚úÖ File is certified for Instagram zero-recompression
echo   üì± Upload directly to Instagram (Stories/Reels/Feed)
echo   üö´ Do NOT re-edit or process in other apps
echo   üèÜ Quality will be preserved at 100%%
echo.

echo  üõ†Ô∏è POST-ENCODING OPTIONS:
echo  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo   [1]  ‚ñ∂Ô∏èPlay Encoded Video
echo   [2] üîÑ Encode Another File
echo   [3] üè† Return to Main Menu
echo.

set /p "post_choice=üéØ Select option [1-3]: "

if "%post_choice%"=="1" goto :PlayEncodedVideo
if "%post_choice%"=="2" call :ResetWorkflow && goto :ShowProfessionalMainMenu
if "%post_choice%"=="3" goto :ShowProfessionalMainMenu

echo ‚ùå Invalid choice. Please select 1-3.
pause
goto :ShowEncodingResults

:PlayEncodedVideo
echo.
echo ‚ñ∂Ô∏è Playing encoded video...
echo üìÅ File: %OUTPUT_FILE%

if not exist "%OUTPUT_FILE%" (
    echo ‚ùå ERROR: Output file not found!
    echo üìÇ File: %OUTPUT_FILE%
    echo üí° Check if encoding completed successfully
    pause
    goto :ShowEncodingResults
)

:: Get file size for display
for %%A in ("%OUTPUT_FILE%") do set "VIDEO_SIZE_BYTES=%%~zA"
set /a "VIDEO_SIZE_MB=%VIDEO_SIZE_BYTES%/1024/1024"

echo ‚úÖ File found: %VIDEO_SIZE_MB% MB
echo üé¨ Opening with default media player...

:: Open video with default player
start "" "%OUTPUT_FILE%"

if errorlevel 1 (
    echo ‚ùå Could not open video file
    echo üí° Make sure you have a media player installed
    echo üí° Try VLC, Windows Media Player, or Movies & TV app
    pause
    goto :ShowEncodingResults
) else (
    echo ‚úÖ Video opened successfully
    echo.
    echo üì± INSTAGRAM PREVIEW:
    echo   ‚Ä¢ Video should look crisp and detailed
    echo   ‚Ä¢ No pixelation or compression artifacts
    echo   ‚Ä¢ Color accuracy maintained
    echo   ‚Ä¢ Audio sync perfect
    echo.
    
    set /p "quality_check=üéØ Quality looks good? (Y/N): "
    if /i "%quality_check:~0,1%"=="Y" (
        echo ‚úÖ Great! Ready for Instagram upload
        echo üèÜ Hollywood-level quality achieved
    ) else (
        echo üîç Consider these options:
        echo   ‚Ä¢ Try different profile for content type
        echo   ‚Ä¢ Use Advanced Customization for fine-tuning
        echo   ‚Ä¢ Check source video quality
        echo   ‚Ä¢ Verify encoding log for any warnings
    )
)

echo.
echo [B] üîô Back to Results Menu
echo [M] üè† Return to Main Menu
echo.
set /p "video_choice=Select option [B/M]: "

if /i "%video_choice:~0,1%"=="B" goto :ShowEncodingResults
if /i "%video_choice:~0,1%"=="M" goto :ShowProfessionalMainMenu
goto :ShowEncodingResults

:ResetWorkflow
echo üîÑ Resetting for new encoding...
set "INPUT_FILE="
set "OUTPUT_FILE="
set "FILES_CONFIGURED=N"
set "TOTAL_ENCODE_TIME=00h 00m 00s"
set "WORKFLOW_STEP=1"
set "SYSTEM_STATUS=READY"
set "READY_TO_ENCODE=N"
call :LogEntry "[WORKFLOW] Reset for new session"
echo ‚úÖ Ready for new files
exit /b 0

:RecoverFromError
echo üõ†Ô∏è Recovery system activated...
if "!BACKUP_CREATED!"=="Y" (
    echo üíæ Restoring backup...
    copy "!BACKUP_NAME!" "!OUTPUT_FILE!" >nul
    if not errorlevel 1 del "!BACKUP_NAME!" 2>nul
)
call :LogEntry "[RECOVERY] Error recovery attempted"
exit /b 0

:DetectSystemCapabilities
echo üîç Detecting system capabilities...
:: Architecture detection
set "CPU_ARCH=x64"
if /i "%PROCESSOR_ARCHITECTURE%"=="x86" set "CPU_ARCH=x86"
:: CPU model detection
set "CPU_MODEL=Unknown"
for /f "tokens=2 delims==" %%A in ('wmic cpu get Name /value 2^>nul ^| find "="') do (
    set "CPU_MODEL=%%A"
    goto :model_done
)
:model_done

call :DetectCPUFromDatabase

set "IS_LAPTOP=N"
wmic computersystem get PCSystemType 2>nul | findstr "2" >nul
if not errorlevel 1 set "IS_LAPTOP=Y"

set "TOTAL_RAM_GB=4"
for /f "tokens=2 delims==" %%A in ('wmic OS get TotalVisibleMemorySize /value 2^>nul ^| find "="') do (
    set "TOTAL_RAM_KB=%%A"
)
if defined TOTAL_RAM_KB (
    if !TOTAL_RAM_KB! GTR 0 (
        set /a "TOTAL_RAM_GB=!TOTAL_RAM_KB!/1024/1024"
        if !TOTAL_RAM_GB! LSS 1 set "TOTAL_RAM_GB=1"
    )
)

echo   ‚úÖ Architecture: !CPU_ARCH!
echo   ‚úÖ CPU: !CPU_CORES! cores (!CPU_FAMILY!)
echo   üíª Type: !IS_LAPTOP:Y=Laptop!!IS_LAPTOP:N=Desktop!
echo   üß† RAM: !TOTAL_RAM_GB!GB

call :LogEntry "[SYSTEM] CPU: !CPU_CORES! cores, RAM: !TOTAL_RAM_GB!GB"
exit /b 0

:DetectCPUFromDatabase
set "CPU_CORES=2"
set "CPU_FAMILY=Unknown"

:: Intel Celeron Detection
echo "!CPU_MODEL!" | findstr /i "Celeron.*1007U" >nul
if not errorlevel 1 (
    set "CPU_CORES=2"
    set "CPU_FAMILY=Intel Celeron 1007U (2C/2T, 1.5GHz)"
    exit /b 0
)

:: AMD Ryzen Detection
echo "!CPU_MODEL!" | findstr /i "Ryzen.*5" >nul
if not errorlevel 1 (
    set "CPU_CORES=6"
    set "CPU_FAMILY=AMD Ryzen 5 (6C/12T)"
    exit /b 0
)

:: Intel Core Detection
echo "!CPU_MODEL!" | findstr /i "Core.*i5" >nul
if not errorlevel 1 (
    set "CPU_CORES=4"
    set "CPU_FAMILY=Intel Core i5 (4C/8T)"
    exit /b 0
)

:: Auto-detect fallback
for /f "tokens=2 delims==" %%A in ('wmic cpu get NumberOfCores /value 2^>nul ^| find "="') do (
    set "CPU_CORES=%%A"
    set "CPU_FAMILY=Auto-detected (!CPU_CORES! cores)"
    exit /b 0
)

:: Final fallback
if defined NUMBER_OF_PROCESSORS (
    set /a "CPU_CORES=!NUMBER_OF_PROCESSORS!/2"
    if !CPU_CORES! LSS 2 set "CPU_CORES=2"
    set "CPU_FAMILY=Estimated (!CPU_CORES! cores)"
)
exit /b 0

:CheckFFmpeg
echo üîç Checking FFmpeg...

set "FFMPEG_CMD=ffmpeg"
%FFMPEG_CMD% -version >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è FFmpeg not found in system PATH
    :loop_ffmpeg
    set /p "FFMPEG_PATH=Enter FFmpeg path: "
    if "!FFMPEG_PATH!"=="" goto loop_ffmpeg
    if not exist "!FFMPEG_PATH!" (
        echo ‚ùå File not found: !FFMPEG_PATH!
        goto loop_ffmpeg
    )
    set "FFMPEG_CMD=!FFMPEG_PATH!"
)

:: Test functionality
"%FFMPEG_CMD%" -f lavfi -i testsrc=duration=1:size=320x240:rate=1 -f null - >nul 2>&1
if errorlevel 1 (
    echo ‚ùå FFmpeg functionality test failed!
    exit /b 1
)

echo   ‚úÖ FFmpeg validated: !FFMPEG_CMD!
call :LogEntry "[OK] FFmpeg validated"
exit /b 0

:AdvancedCustomization
cls
echo üîÑ Loading Advanced Customization Module...
call "%~dp0advanced_customization.bat"
echo.
echo ‚úÖ Customizations completed
echo üîÑ Loading customizations into main script...

:: CRITICAL: Load advanced configuration if available
call :LoadAdvancedConfig

echo ‚úÖ Customizations integrated successfully
echo üîÑ Returning to main menu...
pause
cls

:: ========================================
:: FUTURE DEVELOPMENT STUBS
:: ========================================
:QualityValidation
echo.
echo ‚è≥ VMAF Quality Validation will be implemented in future version
echo üí° Automatic quality scoring and validation
pause
goto :ShowProfessionalMainMenu

:AIOptimization
echo.
echo ‚è≥ AI Content Analysis will be implemented in future version
echo üí° Intelligent profile selection based on content
pause
goto :ShowProfessionalMainMenu

:TelemetrySystem
echo.
echo ‚è≥ Telemetry System will be implemented in future version
echo üí° Anonymous performance and quality metrics
pause
goto :ShowProfessionalMainMenu

:ValidateModularProfiles
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        üîç MODULAR PROFILES VALIDATION                        ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

if "%MODULAR_PROFILES_AVAILABLE%"=="N" (
    echo ‚ùå MODULAR SYSTEM NOT AVAILABLE
    pause
    goto :ShowProfessionalMainMenu
)

echo üìÇ Profiles Directory: %PROFILES_DIR%

set "VALIDATION_PASSED=0"
set "VALIDATION_FAILED=0"
set "TOTAL_PROFILES=0"

for %%F in ("%PROFILES_DIR%\*.prof") do (
    set /a "TOTAL_PROFILES+=1"
    call :ValidateSingleProfile "%%F"
    if not errorlevel 1 (
        set /a "VALIDATION_PASSED+=1"
    ) else (
        set /a "VALIDATION_FAILED+=1"
    )
)

echo.
echo üìä VALIDATION SUMMARY:
echo   üìÅ Total Profiles: !TOTAL_PROFILES!
echo   ‚úÖ Passed: !VALIDATION_PASSED!
echo   ‚ùå Failed: !VALIDATION_FAILED!

if !VALIDATION_FAILED! GTR 0 (
    set "MODULAR_VALIDATION_STATUS=FAILED"
) else if !VALIDATION_PASSED! GTR 0 (
    set "MODULAR_VALIDATION_STATUS=PASSED"  
) else (
    set "MODULAR_VALIDATION_STATUS=NO_PROFILES"
)

pause
goto :ShowProfessionalMainMenu

:ValidateSingleProfile
set "profile_file=%~1"
set "profile_name=%~n1"

echo   üîç Validating: %profile_name%

if not exist "%profile_file%" (
    echo     ‚ùå File not found: %profile_file%
    exit /b 1
)

:: Verificar estrutura b√°sica do arquivo
findstr /C:"[PROFILE_INFO]" "%profile_file%" >nul || (
    echo     ‚ùå Missing [PROFILE_INFO] section
    exit /b 1
)

findstr /C:"[VIDEO_SETTINGS]" "%profile_file%" >nul || (
    echo     ‚ùå Missing [VIDEO_SETTINGS] section
    exit /b 1
)

findstr /C:"[X264_SETTINGS]" "%profile_file%" >nul || (
    echo     ‚ùå Missing [X264_SETTINGS] section
    exit /b 1
)

:: Verificar par√¢metros cr√≠ticos
findstr /C:"PROFILE_NAME=" "%profile_file%" >nul || (
    echo     ‚ùå Missing PROFILE_NAME parameter
    exit /b 1
)

findstr /C:"VIDEO_WIDTH=" "%profile_file%" >nul || (
    echo     ‚ùå Missing VIDEO_WIDTH parameter
    exit /b 1
)

findstr /C:"VIDEO_HEIGHT=" "%profile_file%" >nul || (
    echo     ‚ùå Missing VIDEO_HEIGHT parameter
    exit /b 1
)

findstr /C:"TARGET_BITRATE=" "%profile_file%" >nul || (
    echo     ‚ùå Missing TARGET_BITRATE parameter
    exit /b 1
)

findstr /C:"X264_PRESET=" "%profile_file%" >nul || (
    echo     ‚ùå Missing X264_PRESET parameter
    exit /b 1
)

:: Verificar se x264 params existem (warning se n√£o tiver)
findstr /C:"X264_PARAMS=" "%profile_file%" >nul || (
    echo     ‚ö†Ô∏è Warning: X264_PARAMS not found (will use preset defaults)
)

echo     ‚úÖ Profile structure valid
exit /b 0

:ReloadModularProfiles
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        üîÑ RELOAD MODULAR SYSTEM                              ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo üîÑ Reloading modular system...

:: Reset state
set "MODULAR_PROFILES_AVAILABLE=N"
set "MODULAR_VALIDATION_STATUS=NOT_CHECKED"
set "MODULAR_PROFILE_COUNT=0"

:: Path detection
set "SCRIPT_DIR=%~dp0"
for %%I in ("%SCRIPT_DIR%..") do set "PROJECT_ROOT=%%~fI"
set "AUTO_PROFILES_DIR=%PROJECT_ROOT%\src\profiles\presets"

if exist "%AUTO_PROFILES_DIR%" (
    set "PROFILES_DIR=%AUTO_PROFILES_DIR%"
    set "CONFIG_FILE=%PROJECT_ROOT%\src\config\encoder_config.json"
    goto :reload_found
)

:: Fallback detection
set "FALLBACK_DIR=C:\Users\Gabriel\encoder\src\profiles\presets"
if exist "%FALLBACK_DIR%" (
    set "PROFILES_DIR=%FALLBACK_DIR%"
    set "CONFIG_FILE=C:\Users\Gabriel\encoder\src\config\encoder_config.json"
    goto :reload_found
)

echo ‚ùå Profiles directory not found
pause
goto :ShowProfessionalMainMenu

:reload_found
echo.
echo   üéØ FINAL PATH SELECTED: %PROFILES_DIR%

:: Reload configuration
call :LoadModularConfig
call :CheckIndividualProfiles

echo.
echo üìä RELOAD RESULTS:
echo   Available: %MODULAR_PROFILES_AVAILABLE%  Directory: %PROFILES_DIR%
echo   Profiles: %MODULAR_PROFILE_COUNT%  Status: %MODULAR_VALIDATION_STATUS%

if "%MODULAR_PROFILES_AVAILABLE%"=="Y" (
    echo   ‚úÖ Modular system reloaded successfully
) else (
    echo   ‚ö†Ô∏è Modular system not fully functional
)

call :LogEntry "[MODULAR] Reloaded - Available: %MODULAR_PROFILES_AVAILABLE%"
pause
goto :ShowProfessionalMainMenu

:CheckIndividualProfiles
echo   üîç Checking individual profile files...

set "REQUIRED_PROFILES=reels_9_16:REELS feed_16_9:FEED cinema_21_9:CINEMA speedramp_viral:SPEEDRAMP"
set "PROFILES_OK=0"
set "PROFILES_ERROR=0"

for %%P in (%REQUIRED_PROFILES%) do (
    for /f "tokens=1,2 delims=:" %%A in ("%%P") do (
        set "prof_file=%%A.prof"
        set "prof_name=%%B"
        
        if exist "%PROFILES_DIR%\!prof_file!" (
            echo     ‚úÖ !prof_file! - EXISTS
            
            :: Verifica√ß√£o b√°sica de conte√∫do
            findstr /C:"PROFILE_NAME=" "%PROFILES_DIR%\!prof_file!" >nul
            if not errorlevel 1 (
                echo       ‚úì Contains PROFILE_NAME
                set /a "PROFILES_OK+=1"
            ) else (
                echo       ‚úó Missing PROFILE_NAME
                set /a "PROFILES_ERROR+=1"
            )
            
            findstr /C:"X264_PARAMS=" "%PROFILES_DIR%\!prof_file!" >nul
            if not errorlevel 1 (
                echo       ‚úì Contains X264_PARAMS
            ) else (
                echo       ‚úó Missing X264_PARAMS
            ) 
        ) else (
            echo     ‚ùå !prof_file! - MISSING
            set /a "PROFILES_ERROR+=1"
        )
    )
)

echo.
echo   üìä Profile check summary: %PROFILES_OK% OK, %PROFILES_ERROR% errors
set "MODULAR_PROFILE_COUNT=%PROFILES_OK%"

if %PROFILES_OK% GTR 0 (
    set "MODULAR_PROFILES_AVAILABLE=Y"
    if %PROFILES_ERROR% EQU 0 (
        set "MODULAR_VALIDATION_STATUS=PASSED"
    ) else (
        set "MODULAR_VALIDATION_STATUS=PARTIAL"
    )
) else (
    set "MODULAR_PROFILES_AVAILABLE=N"
    set "MODULAR_VALIDATION_STATUS=FAILED"
)

exit /b 0

:ShowModularSystemInfo
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        üèóÔ∏è MODULAR SYSTEM INFORMATION                         ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo  üèóÔ∏è MODULAR ARCHITECTURE:
echo   üì¶ Framework:V%SCRIPT_VERSION% Modular Edition
echo   üìÇ Profiles Directory: %PROFILES_DIR%
echo.

if exist "%PROFILES_DIR%" (
    echo   üìã Directory Status: EXISTS
    echo   üìÑ Available Profiles:
    for %%F in ("%PROFILES_DIR%\*.prof") do echo     ‚Ä¢ %%~nF
) else (
    echo   üìã Directory Status: NOT FOUND
    echo  üí° Expected location: %PROFILES_DIR%
)
echo.

echo  üìä CURRENT STATUS:
echo   üèóÔ∏è Modular Available: %MODULAR_PROFILES_AVAILABLE%
echo   üîç Last Validation: %MODULAR_VALIDATION_STATUS%
if "%PROFILE_SELECTED%"=="Y" (
    echo   üé¨ Current Profile: %PROFILE_NAME%
)
echo.

pause
goto :ShowProfessionalMainMenu

:AnalyzeInputFile
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                           üîç INPUT FILE ANALYSIS                             ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

if not defined INPUT_FILE (
    echo ‚ö†Ô∏è INPUT FILE NOT CONFIGURED
    pause
    goto :ShowProfessionalMainMenu
)

if not exist "%INPUT_FILE%" (
    echo ‚ùå INPUT FILE NOT FOUND: %INPUT_FILE%
    pause
    goto :ShowProfessionalMainMenu
)

echo üé¨ Analyzing: %INPUT_FILE%
echo.

set "TEMP_ANALYSIS=analysis_%RANDOM%.txt"
"%FFMPEG_CMD%" -i "%INPUT_FILE%" -hide_banner 2>"%TEMP_ANALYSIS%"

if not exist "%TEMP_ANALYSIS%" (
    echo ‚ùå Failed to analyze file
    pause
    goto :ShowProfessionalMainMenu
)

echo üìä DETAILED MEDIA INFORMATION:
type "%TEMP_ANALYSIS%"
del "%TEMP_ANALYSIS%" 2>nul

echo.
pause
goto :ShowProfessionalMainMenu

:ShowSystemInfo
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                          üìã SYSTEM INFORMATION                               ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo  üñ•Ô∏è HARDWARE:
echo   üíª CPU: %CPU_FAMILY%
echo   üî¢ Cores: %CPU_CORES%
echo   üß† RAM: %TOTAL_RAM_GB% GB
echo   üèóÔ∏è Architecture: %CPU_ARCH%
echo   üì± Type: !IS_LAPTOP:Y=Laptop!!IS_LAPTOP:N=Desktop!
echo.

echo  üé¨ SOFTWARE:
echo   üì¶ Framework: Instagram Encoder V%SCRIPT_VERSION%
echo   üîß FFmpeg: %FFMPEG_CMD%
echo   üèóÔ∏è Profile System: Modular (%MODULAR_PROFILES_AVAILABLE%)
echo.

echo  üìä SESSION:
call :GetTimeInSeconds
call :CalculateElapsedTime %SESSION_START_TIME% %total_seconds%
echo   ‚è±Ô∏è Duration: %ELAPSED_TIME%
echo   üîÑ Workflow Step: %WORKFLOW_STEP%/6
echo   üéØ Status: %SYSTEM_STATUS%
echo.

pause
goto :ShowProfessionalMainMenu

:GetTimeInSeconds
set "current_time=%time%"
if "%current_time:~0,1%"==" " set "current_time=%current_time:~1%"

for /f "tokens=1-3 delims=:." %%a in ("%current_time%") do (
    set /a "hours=%%a"
    set /a "minutes=%%b"
    set /a "seconds=%%c"
)

if "%hours:~0,1%"=="0" if not "%hours%"=="0" set /a "hours=%hours:~1%"
if "%minutes:~0,1%"=="0" if not "%minutes%"=="0" set /a "minutes=%minutes:~1%"
if "%seconds:~0,1%"=="0" if not "%seconds%"=="0" set /a "seconds=%seconds:~1%"

set /a "total_seconds=(hours*3600)+(minutes*60)+seconds"
exit /b 0

:CalculateElapsedTime
set /a "start_time=%~1"
set /a "end_time=%~2"

if not defined start_time set "start_time=0"
if not defined end_time set "end_time=0"
set /a "elapsed_seconds=end_time-start_time"

if !elapsed_seconds! LSS 0 set /a "elapsed_seconds=!elapsed_seconds!+86400"

set /a "elapsed_hours=!elapsed_seconds!/3600"
set /a "remaining=!elapsed_seconds!%%3600"
set /a "elapsed_minutes=!remaining!/60"
set /a "elapsed_secs=!remaining!%%60"

if !elapsed_hours! LSS 10 set "elapsed_hours=0!elapsed_hours!"
if !elapsed_minutes! LSS 10 set "elapsed_minutes=0!elapsed_minutes!"
if !elapsed_secs! LSS 10 set "elapsed_secs=0!elapsed_secs!"

set "ELAPSED_TIME=!elapsed_hours!h !elapsed_minutes!m !elapsed_secs!s"
exit /b 0

:LogEntry
if not defined EXEC_LOG (
    for /f "tokens=1-3 delims=/ " %%D in ('echo %date%') do set "LOG_DATE=%%D-%%E-%%F"
    for /f "tokens=1-2 delims=:." %%G in ('echo %time%') do (
        set "LOG_HOUR=%%G"
        set "LOG_MIN=%%H"
    )
    set "LOG_HOUR=!LOG_HOUR: =!"
    set "EXEC_LOG=!LOG_DATE!_!LOG_HOUR!h!LOG_MIN!_instagram_v5.log"
    echo ===== INSTAGRAM ENCODER V5.2 MODULAR LOG - %date% %time% =====>"!EXEC_LOG!"
)
echo [%time:~0,8%] %~1>>"!EXEC_LOG!"
exit /b 0

:ExitProfessional
cls
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                               üëã GOODBYE!                                     ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo  üé¨ Instagram Encoder Framework V%SCRIPT_VERSION%
echo.
call :GetTimeInSeconds
call :CalculateElapsedTime %SESSION_START_TIME% %total_seconds%
echo  ‚è±Ô∏è Session Duration: %ELAPSED_TIME%
if defined EXEC_LOG echo  üìù Session Log: %EXEC_LOG%
echo.
echo  üéØ ACHIEVEMENTS THIS SESSION:
if "%FILES_CONFIGURED%"=="Y" echo     ‚úÖ Files configured and validated
if "%PROFILE_CONFIGURED%"=="Y" echo     ‚úÖ Profile selected: %PROFILE_NAME%
if defined TOTAL_ENCODE_TIME if not "%TOTAL_ENCODE_TIME%"=="00h 00m 00s" echo     ‚úÖ Encoding completed: %TOTAL_ENCODE_TIME%
echo.
echo  üèÜ Thank you for using Hollywood-level encoding!
echo  üéØ Your videos are ready for Instagram zero-recompression
echo.
call :LogEntry "[SESSION] Session ended - Duration: %ELAPSED_TIME%"
echo Press any key to exit...
pause >nul
exit

:ErrorExit
echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                                  ‚ö†Ô∏è ERROR                                    ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.
echo  The process encountered an error and needs to stop.
if defined EXEC_LOG echo  üìù Check log for details: !EXEC_LOG!
echo.
echo  üîß TROUBLESHOOTING:
echo     1. Check your input file exists and is accessible
echo     2. Verify FFmpeg is properly installed
echo     3. Ensure sufficient disk space
echo     4. Review the log file for specific error details
echo.
echo  üí° For support, check the documentation or report the issue
echo.
pause
exit /b 1

::========================================
:: PARSING FIX - ENCODERV5.BAT LoadAdvancedConfig
:: Fix para format: set "VAR=VALUE"
::========================================

:LoadAdvancedConfig
echo üîÑ Loading advanced customizations...

:: Find the most recent advanced config file
set "ADVANCED_CONFIG_FILE="
for /f "delims=" %%F in ('dir "%TEMP%\encoder_advanced_config_*.tmp" /b /o:-d 2^>nul') do (
    set "ADVANCED_CONFIG_FILE=%TEMP%\%%F"
    goto :config_found
)

:config_found
if not defined ADVANCED_CONFIG_FILE (
    echo   ‚ÑπÔ∏è No advanced customizations found - using profile defaults
    exit /b 0
)

if not exist "%ADVANCED_CONFIG_FILE%" (
    echo   ‚ö†Ô∏è Advanced config file not accessible
    exit /b 0
)

echo   üìÇ Loading from: %ADVANCED_CONFIG_FILE%

:: RESET ALL CUSTOM VARIABLES FIRST
set "CUSTOM_PRESET="
set "CUSTOM_PSY_RD="
set "CUSTOM_GOP_SIZE="
set "CUSTOM_KEYINT_MIN="
set "GOP_PRESET_NAME="
set "CUSTOM_MAX_BITRATE="
set "CUSTOM_BUFFER_SIZE="
set "VBV_PRESET_NAME="
set "CUSTOM_AUDIO_BITRATE="
set "CUSTOM_AUDIO_SAMPLERATE="
set "CUSTOM_AUDIO_CHANNELS="
set "AUDIO_PRESET_NAME="
set "CUSTOM_COLOR_PARAMS="
set "COLOR_PRESET_NAME="

:: ENHANCED PARSING FOR "set VAR=VALUE" FORMAT
for /f "usebackq delims=" %%A in ("%ADVANCED_CONFIG_FILE%") do (
    set "line=%%A"
    
    :: Skip comment lines
    if not "!line:~0,2!"=="::" (
        :: Check if line starts with "set "
        if "!line:~0,4!"=="set " (
            :: Extract variable assignment from set command
            set "assignment=!line:~4!"
            
            :: Remove quotes around assignment
            set "assignment=!assignment:"=!"
            
            :: Parse VAR=VALUE
            for /f "tokens=1* delims==" %%B in ("!assignment!") do (
                set "param_name=%%B"
                set "param_value=%%C"
                
                :: Remove any remaining spaces
                for /f "tokens=* delims= " %%D in ("!param_name!") do set "param_name=%%D"
                
                :: ASSIGN VARIABLES - EXACT MATCHING
                if "!param_name!"=="CUSTOM_PRESET" set "CUSTOM_PRESET=!param_value!"
                if "!param_name!"=="CUSTOM_PSY_RD" set "CUSTOM_PSY_RD=!param_value!"
                if "!param_name!"=="CUSTOM_GOP_SIZE" set "CUSTOM_GOP_SIZE=!param_value!"
                if "!param_name!"=="CUSTOM_KEYINT_MIN" set "CUSTOM_KEYINT_MIN=!param_value!"
                if "!param_name!"=="GOP_PRESET_NAME" set "GOP_PRESET_NAME=!param_value!"
                if "!param_name!"=="CUSTOM_MAX_BITRATE" set "CUSTOM_MAX_BITRATE=!param_value!"
                if "!param_name!"=="CUSTOM_BUFFER_SIZE" set "CUSTOM_BUFFER_SIZE=!param_value!"
                if "!param_name!"=="VBV_PRESET_NAME" set "VBV_PRESET_NAME=!param_value!"
                if "!param_name!"=="CUSTOM_AUDIO_BITRATE" set "CUSTOM_AUDIO_BITRATE=!param_value!"
                if "!param_name!"=="CUSTOM_AUDIO_SAMPLERATE" set "CUSTOM_AUDIO_SAMPLERATE=!param_value!"
                if "!param_name!"=="CUSTOM_AUDIO_CHANNELS" set "CUSTOM_AUDIO_CHANNELS=!param_value!"
                if "!param_name!"=="AUDIO_PRESET_NAME" set "AUDIO_PRESET_NAME=!param_value!"
                if "!param_name!"=="CUSTOM_COLOR_PARAMS" set "CUSTOM_COLOR_PARAMS=!param_value!"
                if "!param_name!"=="COLOR_PRESET_NAME" set "COLOR_PRESET_NAME=!param_value!"
            )
        )
    )
)

:: DETAILED VALIDATION WITH PROPER FEEDBACK
echo   üîç Validating loaded configuration...
set "VALIDATION_ERRORS=0"
set "LOADED_VARS=0"

:: Check loaded variables with detailed output
if defined CUSTOM_PRESET (
    echo     ‚úÖ x264 Preset: %CUSTOM_PRESET%
    set /a "LOADED_VARS+=1"
)

if defined CUSTOM_PSY_RD (
    echo     ‚úÖ Psychovisual: %CUSTOM_PSY_RD%
    set /a "LOADED_VARS+=1"
)

if defined CUSTOM_GOP_SIZE (
    if defined CUSTOM_KEYINT_MIN (
        echo     ‚úÖ GOP Structure: %GOP_PRESET_NAME% (%CUSTOM_GOP_SIZE%/%CUSTOM_KEYINT_MIN%)
        set /a "LOADED_VARS+=1"
    ) else (
        echo     ‚ö†Ô∏è GOP size loaded but min keyint missing
        set /a "VALIDATION_ERRORS+=1"
    )
) 

if defined CUSTOM_MAX_BITRATE (
    if defined CUSTOM_BUFFER_SIZE (
        echo     ‚úÖ VBV Buffer: %VBV_PRESET_NAME% (%CUSTOM_MAX_BITRATE%/%CUSTOM_BUFFER_SIZE%)
        set /a "LOADED_VARS+=1"
    ) else (
        echo     ‚ö†Ô∏è Max bitrate loaded but buffer size missing
        set /a "VALIDATION_ERRORS+=1"
    )
)

if defined AUDIO_PRESET_NAME (
    echo     ‚úÖ Audio: %AUDIO_PRESET_NAME% (%CUSTOM_AUDIO_BITRATE%, %CUSTOM_AUDIO_SAMPLERATE%Hz)
    set /a "LOADED_VARS+=1"
)

if defined COLOR_PRESET_NAME (
    echo     ‚úÖ Color Science: %COLOR_PRESET_NAME%
    set /a "LOADED_VARS+=1"
)

:: FINAL STATUS
if !VALIDATION_ERRORS! GTR 0 (
    echo     ‚ùå %VALIDATION_ERRORS% validation errors found
    echo     üí° Some customizations may not be applied correctly
    call :LogEntry "[CONFIG] Advanced config validation: %VALIDATION_ERRORS% errors"
) else (
    if !LOADED_VARS! GTR 0 (
        echo     ‚úÖ All customizations validated successfully (%LOADED_VARS% loaded)
        set "ADVANCED_MODE=Y"
        set "CUSTOMIZATION_ACTIVE=Y"
        call :LogEntry "[CONFIG] Advanced customizations loaded successfully: %LOADED_VARS% variables"
    ) else (
        echo     ‚ÑπÔ∏è Standard mode - no advanced validation needed
        call :LogEntry "[CONFIG] Standard mode - no customizations to load"
    )
)

echo   ‚úÖ Advanced configuration loading completed
exit /b 0
